--- a/vsock-only/linux/af_vsock.c	2014-06-12 19:20:46.000000000 -0400
+++ b/vsock-only/linux/af_vsock.c	2015-05-13 22:12:02.000000000 -0400
@@ -2869,7 +2869,7 @@
       vsk->connectTimeout = psk->connectTimeout;
    } else {
       vsk->trusted = capable(CAP_NET_ADMIN);
-      vsk->owner = current_uid();
+      vsk->owner = current_uid().val; /* this works for me but it's not right */
       vsk->queuePairSize = VSOCK_DEFAULT_QP_SIZE;
       vsk->queuePairMinSize = VSOCK_DEFAULT_QP_SIZE_MIN;
       vsk->queuePairMaxSize = VSOCK_DEFAULT_QP_SIZE_MAX;
@@ -4285,7 +4285,8 @@
       goto out;
    }
 
-   memcpy_fromiovec(VMCI_DG_PAYLOAD(dg), msg->msg_iov, len);
+   /*memcpy_fromiovec(VMCI_DG_PAYLOAD(dg), msg->msg_iov, len);*/
+   copy_from_iter(VMCI_DG_PAYLOAD(dg), len, &(msg->msg_iter));
 
    dg->dst = VMCI_MAKE_HANDLE(remoteAddr->svm_cid, remoteAddr->svm_port);
    dg->src = VMCI_MAKE_HANDLE(vsk->localAddr.svm_cid, vsk->localAddr.svm_port);
@@ -4645,7 +4646,7 @@
        * able to send.
        */
 
-      written = vmci_qpair_enquev(vsk->qpair, msg->msg_iov,
+      written = vmci_qpair_enquev(vsk->qpair, msg->msg_iter.iov,
                                   len - totalWritten, 0);
       if (written < 0) {
          err = -ENOMEM;
@@ -4742,7 +4743,11 @@
    }
 
    /* Place the datagram payload in the user's iovec. */
-   err = skb_copy_datagram_iovec(skb, sizeof *dg, msg->msg_iov, payloadLen);
+   #if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 19, 0) 
+   err = skb_copy_datagram_iter(skb, sizeof *dg, &(msg->msg_iter), payloadLen);
+   #else
+   err = skb_copy_datagram_iovec(skb, sizeof *dg, msg->msg_iov, payloadLen);   
+   #endif
    if (err) {
       goto out;
    }
@@ -4888,9 +4893,17 @@
          }
 
          if (flags & MSG_PEEK) {
-            read = vmci_qpair_peekv(vsk->qpair, msg->msg_iov, len - copied, 0);
+	    #if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 19, 0) 
+            read = vmci_qpair_peekv(vsk->qpair, msg->msg_iter.iov, len - copied, 0);
+	    #else
+	    read = vmci_qpair_peekv(vsk->qpair, msg->msg_iov, len - copied, 0);
+	    #endif
          } else {
-            read = vmci_qpair_dequev(vsk->qpair, msg->msg_iov, len - copied, 0);
+	    #if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 19, 1) 
+            read = vmci_qpair_dequev(vsk->qpair, msg->msg_iter.iov, len - copied, 0);
+	    #else
+	    read = vmci_qpair_dequev(vsk->qpair, msg->msg_iov, len - copied, 0);
+	    #endif
          }
 
          if (read < 0) {
