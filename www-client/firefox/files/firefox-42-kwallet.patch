diff -prwuN a/security/manager/ssl/nsNSSCallbacks.cpp b/security/manager/ssl/nsNSSCallbacks.cpp
--- a/security/manager/ssl/nsNSSCallbacks.cpp	2015-10-29 18:18:00.000000000 -0400
+++ b/security/manager/ssl/nsNSSCallbacks.cpp	2015-12-06 18:11:22.000000000 -0500
@@ -24,6 +24,7 @@
 #include "SharedSSLState.h"
 #include "ssl.h"
 #include "sslproto.h"
+#include "../../nss/lib/pk11wrap/pk11pub.h"
 
 using namespace mozilla;
 using namespace mozilla::psm;
@@ -854,9 +855,19 @@ void PK11PasswordPromptRunnable::RunOnTa
   }
 }
 
+#include "PromptPasswordExternal.cpp"
+
+int
+PasswordPromptExternal(char **password);
+int ppe_force_show = 0;
+
 char*
 PK11PasswordPrompt(PK11SlotInfo* slot, PRBool retry, void* arg)
 {
+  char *mResult;
+  if (!ppe_force_show && !retry && !PasswordPromptExternal(&mResult))
+    return mResult;
+
   RefPtr<PK11PasswordPromptRunnable> runnable(
     new PK11PasswordPromptRunnable(slot,
                                    static_cast<nsIInterfaceRequestor*>(arg)));
diff -prwuN a/security/manager/ssl/nsPK11TokenDB.cpp b/security/manager/ssl/nsPK11TokenDB.cpp
--- a/security/manager/ssl/nsPK11TokenDB.cpp	2015-10-29 18:18:00.000000000 -0400
+++ b/security/manager/ssl/nsPK11TokenDB.cpp	2015-12-06 19:00:13.000000000 -0500
@@ -181,6 +181,8 @@ NS_IMETHODIMP nsPK11Token::IsLoggedIn(bo
   return rv;
 }
 
+extern int ppe_force_show;
+
 NS_IMETHODIMP 
 nsPK11Token::Login(bool force)
 {
@@ -199,7 +201,9 @@ nsPK11Token::Login(bool force)
   }
   rv = setPassword(mSlot, mUIContext);
   if (NS_FAILED(rv)) return rv;
+	ppe_force_show = 1;
   srv = PK11_Authenticate(mSlot, true, mUIContext);
+	ppe_force_show = 0;
   return (srv == SECSuccess) ? NS_OK : NS_ERROR_FAILURE;
 }
 
diff -prwuN a/security/manager/ssl/PromptPasswordExternal.cpp b/security/manager/ssl/PromptPasswordExternal.cpp
--- a/security/manager/ssl/PromptPasswordExternal.cpp	1969-12-31 19:00:00.000000000 -0500
+++ b/security/manager/ssl/PromptPasswordExternal.cpp	2015-12-06 12:44:39.000000000 -0500
@@ -0,0 +1,74 @@
+#include <stdlib.h>
+#include <stdio.h>
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+#include <string.h>
+#include <errno.h>
+
+int
+PasswordPromptExternal(char **password)
+{
+  int fd_pipe[2];
+  pid_t pid;
+  if (pipe(fd_pipe) == -1)
+  {
+    fprintf(stderr, "SshAskPassword() -- pipe() failed!\n");
+    return -1;
+  }
+  if((pid = fork()) == -1)
+  {
+    fprintf(stderr, "SshAskPassword() -- fork() failed!\n");
+    return -1;
+  }
+  else if(pid == 0)
+  {
+    char *pw_cmd = (char*) strdup("/usr/bin/ksshaskpass");
+    char *pw_conv = (char*) strdup("Firefox/Software Security Device");
+    char *const args[] = { pw_cmd, pw_conv, NULL };
+    if (dup2(fd_pipe[1], STDOUT_FILENO) == -1)
+    {
+      fprintf(stderr, "SshAskPassword() -- dup2() failed!\n");
+      exit(-1);
+    }
+    close(fd_pipe[0]);
+    execv(pw_cmd, args);
+    fprintf(stderr, "SshAskPassword() -- execv() failed!\n");
+    exit(237);
+  }
+  else
+  {
+    int exit_code, buf_len = 0, pw_len = 0, r;
+    char *pw_buf = NULL;
+    close(fd_pipe[1]);
+    while (waitpid(pid, &exit_code, 0) != pid);
+    if(WEXITSTATUS(exit_code))
+    {
+      fprintf(stderr, "[%i]: SshAskPassword() -- ksshaskpass returned %i\n", 
+        getpid(), WEXITSTATUS(exit_code));
+      if(WEXITSTATUS(exit_code) != 237)
+      {
+        *password = nullptr;
+        return 0;
+      }
+      return exit_code;
+    }
+    while(1)
+    {
+      buf_len += 16;
+      pw_buf = (char*) realloc(pw_buf, (buf_len * sizeof(char))+1);
+      if(pw_buf == (char *)NULL)
+      {
+        fprintf(stderr, "[%i]: SshAskPassword() -- realloc() failed!\n", getpid());
+        return -1;
+      }
+      r = read(fd_pipe[0], pw_buf + pw_len, 16);
+      if (r <= 0)
+        break;
+      pw_len += r;
+      pw_buf[pw_len] = '\0';
+    }
+    *password = (r != 0 && !pw_len) ? NULL : pw_buf;
+    return 0;
+  }
+}
